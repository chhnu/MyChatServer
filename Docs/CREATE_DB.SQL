--图片表，存头像，聊天图片
CREATE TABLE TBL_PICTURE(PIC_ID NUMBER(10,0) PRIMARY KEY,
PICTURE BLOB NOT NULL,
POST_DATE DATE DEFAULT SYSDATE);
--用户表，存个人信息
CREATE TABLE TBL_USER(USER_ID NUMBER(10,0) PRIMARY KEY,
USERNAME NVARCHAR2(20) UNIQUE NOT NULL,
PASSWORD NVARCHAR2(20) NOT NULL,
NICKNAME NVARCHAR2(10) NOT NULL,
GENDER NVARCHAR2(10) CHECK(GENDER IN ('MALE','FEMALE')),
REGION NVARCHAR2(20),
PORTRAIT NUMBER(10,0),
DESCRIPTION NVARCHAR2(30),
REGIST_DATE DATE DEFAULT SYSDATE,
PHONE_NUMBER NVARCHAR2(11) NOT NULL,
FOREIGN KEY (PORTRAIT) REFERENCES TBL_PICTURE(PIC_ID));
--通知表，用户上线会读取这个表
CREATE TABLE TBL_NOTIFICATION(NOTIFICATION_ID NUMBER(10,0) PRIMARY KEY,
NUSER_ID NUMBER(10,0) NOT NULL,
NOTIFICATION NVARCHAR2(100) NOT NULL,
POST_DATE DATE DEFAULT SYSDATE,
STATUS NVARCHAR2(10) DEFAULT 'UNREAD' CHECK(STATUS IN ('READ','UNREAD')),
FOREIGN KEY (NUSER_ID) REFERENCES TBL_USER(USER_ID));
--好友表
CREATE TABLE TBL_FRIEND(FUSER_ID NUMBER(10,0) NOT NULL,
FRIEND_ID NUMBER(10,0) NOT NULL,
DESCRIPTION NVARCHAR2(20),
BLOCK NUMBER(1,0) DEFAULT 0,
PRIMARY KEY (FUSER_ID,FRIEND_ID),
FOREIGN KEY (FUSER_ID) REFERENCES TBL_USER(USER_ID),
FOREIGN KEY (FRIEND_ID) REFERENCES TBL_USER(USER_ID));
--好友申请表
CREATE TABLE TBL_FRIENDAPPLICATION(APPLICANT_ID NUMBER(10,0) NOT NULL,
TARGET_ID NUMBER(10,0) NOT NULL,
APPLY_DATE DATE DEFAULT SYSDATE,
DESCRIPTION NVARCHAR2(20),
STATUS NVARCHAR2(10) DEFAULT 'UNREAD' CHECK(STATUS IN ('UNREAD','ACCEPT','REFUSE','READ')),
PRIMARY KEY (APPLICANT_ID,TARGET_ID,APPLY_DATE),
FOREIGN KEY (APPLICANT_ID) REFERENCES TBL_USER(USER_ID),
FOREIGN KEY (TARGET_ID) REFERENCES TBL_USER(USER_ID));
--朋友圈
CREATE TABLE TBL_TIMELINE(TIMELINE_ID NUMBER(10,0) NOT NULL PRIMARY KEY,
CONTENT NVARCHAR2(1000) NOT NULL,
FROM_ID NUMBER(15) NOT NULL,
VISIBILITY NVARCHAR2(2000) DEFAULT 'ALL',
PUSH_DATE DATE DEFAULT SYSDATE,
FOREIGN KEY (FROM_ID) REFERENCES TBL_USER(USER_ID));
--朋友圈评论
CREATE TABLE TBL_COMMENT(COMMENT_ID NUMBER(10,0) PRIMARY KEY,
TIMELINE_ID NUMBER(10,0) NOT NULL,
CONTENT NVARCHAR2(1000) NOT NULL,
FROM_ID NUMBER(10,0) NOT NULL,
COMMENT_DATE DATE DEFAULT SYSDATE,
FOREIGN KEY (TIMELINE_ID) REFERENCES TBL_USER(USER_ID),
FOREIGN KEY (FROM_ID) REFERENCES TBL_USER(USER_ID));
--朋友圈评论的回复
CREATE TABLE TBL_REPLY(REPLY_ID NUMBER(10,0) PRIMARY KEY,
COMMENT_ID NUMBER(10,0) NOT NULL,
CONTENT NVARCHAR2(1000) NOT NULL,
FROM_ID NUMBER(10,0) NOT NULL,
REPLY_DATE DATE DEFAULT SYSDATE,
FOREIGN KEY (COMMENT_ID) REFERENCES TBL_COMMENT(COMMENT_ID),
FOREIGN KEY (FROM_ID) REFERENCES TBL_USER(USER_ID));
--聊天记录表
CREATE TABLE TBL_MESSAGE_QUEUE(MESSAGE_ID NUMBER(10,0) PRIMARY KEY,
FROM_ID NUMBER(10,0) NOT NULL,
TO_ID NUMBER(10,0) NOT NULL,
CONTENT NVARCHAR2(1000) NOT NULL,
CONTENT_TYPE NVARCHAR2(10) DEFAULT 'TEXT' CHECK(CONTENT_TYPE IN ('TEXT','PICTURE','SOUND','VIDEO','FILE')),
STATUS NVARCHAR2(10) DEFAULT 'UNREAD' CHECK(STATUS IN ('UNREAD','READ')),
POST_DATE DATE DEFAULT SYSDATE,
FOREIGN KEY (FROM_ID) REFERENCES TBL_USER(USER_ID),
FOREIGN KEY (TO_ID) REFERENCES TBL_USER(USER_ID));

--触发器，拒绝或者同意好友申请，同意时向好友表双向添加好友
CREATE OR REPLACE TRIGGER TRG_FRIENDAPPLICATION
BEFORE INSERT OR UPDATE
ON TBL_FRIENDAPPLICATION
FOR EACH ROW
DECLARE
    V_USERID TBL_USER.USER_ID%TYPE;
    V_NICKNAME TBL_USER.NICKNAME%TYPE;
    V_EXIST NUMBER(1,0);
BEGIN
  IF UPDATING THEN
    SELECT USER_ID INTO V_USERID FROM TBL_USER WHERE USER_ID=:NEW.APPLICANT_ID;
    SELECT NICKNAME INTO V_NICKNAME FROM TBL_USER WHERE USER_ID=:NEW.TARGET_ID;
    IF :NEW.STATUS='ACCEPT' THEN
      --查询是否单方已经添加，没有就互相填入对方的好友列表
      SELECT COUNT(*) INTO V_EXIST FROM TBL_FRIEND WHERE FUSER_ID=:NEW.APPLICANT_ID AND FRIEND_ID=:NEW.TARGET_ID;
      IF V_EXIST=0 THEN
        --申请人 被申请人
        INSERT INTO TBL_FRIEND(FUSER_ID,FRIEND_ID) VALUES (:NEW.APPLICANT_ID,:NEW.TARGET_ID);
      END IF;
      SELECT COUNT(*) INTO V_EXIST FROM TBL_FRIEND WHERE FUSER_ID=:NEW.TARGET_ID AND FRIEND_ID=:NEW.APPLICANT_ID;
      IF V_EXIST=0 THEN
        --被申请人 申请人
         INSERT INTO TBL_FRIEND(FUSER_ID,FRIEND_ID,DESCRIPTION) VALUES (:NEW.TARGET_ID,:NEW.APPLICANT_ID,:NEW.DESCRIPTION);
      END IF;
      INSERT INTO TBL_NOTIFICATION(notification_id,NUSER_ID,notification) 
      VALUES (SQ_MYCHAT.NEXTVAL,V_USERID,V_NICKNAME||'已经同意您的好友申请');
      :NEW.STATUS:='READ';--申请状态为已读
    ELSIF :NEW.STATUS='REJECT' THEN
      INSERT INTO TBL_NOTIFICATION(notification_id,NUSER_ID,notification) 
      VALUES (SQ_MYCHAT.NEXTVAL,V_USERID,V_NICKNAME||'拒绝您的好友申请');
      :NEW.STATUS:='READ';--申请状态为已读
    END IF;
  ELSIF INSERTING THEN
    --查询申请人昵称
    SELECT NICKNAME INTO V_NICKNAME FROM TBL_USER WHERE USER_ID=:NEW.APPLICANT_ID;
    --查询被申请人ID
    SELECT USER_ID INTO V_USERID FROM TBL_USER WHERE USER_ID=:NEW.TARGET_ID;
    --通知被申请人
    INSERT INTO TBL_NOTIFICATION(notification_id,NUSER_ID,notification) 
      VALUES (SQ_MYCHAT.NEXTVAL,V_USERID,V_NICKNAME||'请求加您为好友');
  END IF;
END;

--触发器，用于更换头像时候，从图片表删除旧图
CREATE OR REPLACE TRIGGER TRG_PICTURE
AFTER UPDATE
ON TBL_USER
FOR EACH ROW
BEGIN
   IF UPDATING THEN
     IF :OLD.PORTRAIT<>:NEW.PORTRAIT THEN
        DELETE FROM TBL_PICTURE WHERE PIC_ID=:OLD.PORTRAIT;
     END IF;
   END IF;
END;


--双向删除好友
/*
CREATE OR REPLACE PROCEDURE
DELETE_FRIEND(MYUSER_ID NUMBER,TARGET_ID NUMBER)
IS
BEGIN
    DELETE FROM TBL_FRIEND WHERE FUSER_ID=TARGET_ID AND FRIEND_ID=MYUSER_ID;
END DELETE_FRIEND;


CREATE OR REPLACE TRIGGER TRG_DELETEFRIEND
AFTER DELETE
ON TBL_FRIEND
FOR EACH ROW
DECLARE
    V_MYID TBL_USER.USER_ID%TYPE;
    V_TARGETID TBL_USER.USER_ID%TYPE;
BEGIN
  IF DELETING THEN
    V_MYID:=:OLD.FUSER_ID;
    V_TARGETID:=:OLD.FRIEND_ID;
    DELETE_FRIEND(V_MYID,V_TARGETID);
  END IF;
END;*/

-------------------------------测试---------------------------------------

delete from TBL_FRIENDAPPLICATION;
delete from TBL_FRIEND;
delete from TBL_NOTIFICATION;
delete from TBL_MESSAGE_QUEUE;

select * from TBL_PICTURE;
select * from TBL_USER;
select * from TBL_FRIENDAPPLICATION;
select * from TBL_FRIEND;
select * from TBL_NOTIFICATION;
select * from TBL_MESSAGE_QUEUE;

update TBL_MESSAGE_QUEUE set status='UNREAD';

insert into TBL_FRIENDAPPLICATION(APPLICANT_ID,TARGET_ID) VALUES (12,13);
UPDATE TBL_FRIENDAPPLICATION SET STATUS='ACCEPT' WHERE
APPLICANT_ID=12 AND TARGET_ID=13;